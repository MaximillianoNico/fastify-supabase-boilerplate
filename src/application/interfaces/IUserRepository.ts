// File: src/application/interfaces/IUserRepository.ts
import { User } from '@/domain/user'; // Use path alias

// Data Transfer Object (DTO) for creating a user.
// Excludes fields typically generated by the database (id, created_at).
export type CreateUserDTO = Pick<User, 'email' | 'password' | 'username'>; // Add other required fields from User domain interface
// Example with more fields:
// export type CreateUserDTO = Pick<User, 'email' | 'name'> & { password?: string }; // Include password only for creation maybe

// Data Transfer Object (DTO) for updating a user.
// Makes fields optional for partial updates.
export type UpdateUserDTO = Partial<Omit<User, 'id' | 'created_at'>>; // Allow updating email, name, etc.

export interface IUserRepository {
  /** Finds a user by their unique ID. */
  findById(id: string): Promise<Omit<User, 'password'> | null>;

  /** Finds a user by their email address. */
  findByEmail(email: string): Promise<Omit<User, 'password'> | null>;

  /** Creates a new user record. */
  create(userData: CreateUserDTO): Promise<User>;

  /** Updates an existing user record. */
  // update(id: string, userData: UpdateUserDTO): Promise<User | null>; // Example update method

  /** Deletes a user record by ID. */
  // delete(id: string): Promise<boolean>; // Example delete method

  /** Finds all users (use with caution, add pagination). */
  // findAll(options?: { limit?: number; offset?: number }): Promise<User[]>; // Example find all
}